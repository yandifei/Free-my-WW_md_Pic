[General]
SyntaxVersion=2
BeginHotkey=121
BeginHotkeyMod=0
PauseHotkey=19
PauseHotkeyMod=0
StopHotkey=123
StopHotkeyMod=0
RunOnce=1
EnableWindow=
MacroID=16cc7b23-607b-412c-93cd-74ab5dbd155c
Description=BOSSÕ½¶·
Enable=1
AutoRun=0
[Repeat]
Type=0
Number=1
[SetupUI]
Type=1
QUI=Form1
[Relative]
SetupOCXFile=
[Comment]

[UIPackage]



[Script]
Goto ¶¨Òå
Rem ¿ªÊ¼

//WW_selcet_boss_ch_number = 1
WW_selcet_tr_su_number = 1
//Ò»Ö±Ç°½øÉ±¹Ö
Call WW_selcet_tr_su_challenge()
//ÎÞÒôÇøÌôÕ½(Ò»Ö±Ç°½øµÈµ½¹ÖÎï³öÏÖºó»÷É±)
Sub WW_selcet_tr_su_challenge()//¼ÆÊ±Æ÷Ä£¿é×¨Êô
    If WW_selcet_tr_su_number > 0 or WW_selcet_boss_ch_number > 0 Then //ÎÞÒôÇøÕ½¶·Ä£Ê½×¨Êô
        KeyDown Move_forward, 1//°´w¼ü,°´¿ì²»»áÒ»¿¨Ò»¿¨µÄ(²»ÄÜ¼ÓÑÓ³Ù)
        Do Until  WW_f_scanx() > 0 or i = 20000//¼ì²â¼¤»î°´Å¥³öÏÖ
            Delay 100
            i = i + 100
        Loop
        KeyUp Move_forward, 1
        If i = 20000 Then 
            Exit Sub//Ç°½ø³¬¹ý20Ãë¶¼»¹Ã»³öÏÖ¼¤»î°´Å¥¾ÍÅÐ¶Ï´«ËÍµØµãÊ§°Ü,ÖØÐÂ´«ËÍ
        End If
        f 100//µã»÷¼¤»î°´Å¥
        Call WW_timer()//µÈ´ý¹ÖÎï³öÏÖÔÚ
    End If
    If Form1.×Ô¶¨ÒåÕ½¶·.ListIndex = 0 Then //Ñ¡ÔñÄ¬ÈÏÕ½¶·Ä£Ê½
        Call Ä¬ÈÏÕ½¶·Ä£Ê½()
    Else 
        Call ×Ô¶¨ÒåÕ½¶·Ä£Ê½()
    End If
    //==========Â¼ÈëÕ½¶·½áÊø¼ÆÊý==========*/
    If WW_selcet_boss_ch_number > 0 Then //boss»÷É±µÄ¼ÆÊý
        boss»÷É± WW_selcet_boss_ch_number//ÁÐ±í»÷É±·´À¡ºÍ¼ÆÊý
    End If
    If WW_weekly_ch_number > 0 Then //ÖÜ±¾»÷É±¼ÆÊý
        status_list "ÖÜ±¾bossËÀÍöÁË"
    End If
    If WW_selcet_tr_su_number > 0 Then //ÎÞÒôÇø¼ÆÊýºÍ·´À¡
        status_list "ÎÞÒôÇøÕ½¶·½áÊø"
    End If
    //Â¼Èëboss»÷É±µÄÊýÄ¿ºÍ·´À¡ÁÐ±í
    
    //    If WW_selcet_tr_su_number > 0 Then //ÅÐ¶ÏÊÇÎÞÒôÇøÄ£¿éµÄÁìÈ¡
    //    	Call WW_selcet_tr_su()//»Øµ½¿ªÊ¼µÄÎ»ÖÃ,ÉÏyoloÒ²¿ÉÒÔµ«ÊÇ²»ÊÇ×îºÃµÄ´¦Àí·½Ê½
    //    	
    //    End If
    If Form1.Õ½¶·½áÊøÌáÊ¾.ListIndex = 1 Then 
        MessageBox "Õ½¶·½áÊø"	
    End If
End Sub
//Ä¬ÈÏÕ½¶·Ä£Ê½1(Õë¶ÔÎÞÒôÇø¡¢ËþµÈ¶à²¨¹Ö)
Sub Ä¬ÈÏÕ½¶·Ä£Ê½()
	/*----------Ä¬ÈÏÕ½¶·Ïß³Ì¿ªÊ¼---------*/
    thread_lock_on = BeginThread(lock_on)//Æô¶¯Ë÷µÐÏß³Ì
    threadall_a = BeginThread(all_a)//Ò»Ö±Æ½a
    threadall_qer = BeginThread(all_qer)//Ò»Ö±ÊÍ·Å¹²Ãù¼¼ÄÜ¡¢Éùº§¼¼ÄÜ¡¢¹²Ãù½â·Å
    threadswitch_role = BeginThread(switch_role)//²»Í£ÇÐ½ÇÉ«  
    /*==========bossµÄÕ½¶·½áÊøÅÐ¶Ï=========*/
    If WW_selcet_boss_ch_number > 0 Then //ÎÞÒôÇøÕ½¶·Ä£Ê½×¨Êô
        Do Until alldiex() > 0 or re_winx() > 0 or alldie2() > 0//¼ì²âµ½½ÇÉ«ËÀÍö»òÈ«¶ÓËÀÍö(´óÊÀ½ç»ò¸±±¾)
            If WW_boss_appear() < 0 and WW_boss_hp_point() < 0 and WW_lacox() > 0 Then // and WW_ÈÎÎñºÍÖÕ¶ËÍ¼±ê() > 0
                Delay 200
                If WW_boss_hp_point() < 0 and WW_lacox() > 0 and WW_ÈÎÎñºÍÖÕ¶ËÍ¼±ê() > 0  Then
                    Exit Do
                End If
            End If
        Loop
    End If
    /*----------Ä¬ÈÏÕ½¶·Ïß³ÌÍ£Ö¹---------*/
    StopThread thread_lock_on//Í£Ö¹Ë÷µÐÏß³Ì
    StopThread threadall_qer//Í£Ö¹¼¼ÄÜÏß³Ì
    StopThread threadall_a//Í£Ö¹Æ½aÏß³Ì
    StopThread threadswitch_role//Í£Ö¹½ÇÉ«ÇÐ»»Ïß³Ì
End Sub
//Ñ¡Ôñ×Ô¶¨ÒåÕ½¶·Ä£Ê½
Sub ×Ô¶¨ÒåÕ½¶·Ä£Ê½()
	/*----------×Ô¶¨ÒåÕ½¶·Ïß³Ì¿ªÊ¼---------*/
    thread×Ô¶¨ÒåÕ½¶·½Å±¾ = BeginThread(×Ô¶¨ÒåÕ½¶·½Å±¾)
    /*==========ÎÞÒôÇøµÄÕ½¶·½áÊøÅÐ¶Ï=========*/
    If WW_selcet_tr_su_number > 0 Then //ÎÞÒôÇøÕ½¶·Ä£Ê½×¨Êô
        Do Until alldiex() > 0 or re_winx() > 0 or alldie2() > 0//¸±±¾ºÍ´óÊÀ½çÈ«¶ÓËÀÍö¡¢½ÇÉ«µ¥¸öËÀÍö
            If  challenge_complete() > 0 and WW_lacox() > 0 Then //ÌôÕ½³É¹¦Í¼±êºÍUIDÍ¼±ê
                Exit Do
            End If
            //        Delay 50//Í£¶Ù0.05Ãë,ÅÂËÀËøÁË
        Loop
    End If
    /*==========bossµÄÕ½¶·½áÊøÅÐ¶Ï=========*/
    If WW_selcet_tr_su_number > 0 Then //ÎÞÒôÇøÕ½¶·Ä£Ê½×¨Êô
        Do Until alldiex() > 0 or re_winx() > 0 or alldie2() > 0//¼ì²âµ½½ÇÉ«ËÀÍö»òÈ«¶ÓËÀÍö(´óÊÀ½ç»ò¸±±¾)
            If WW_boss_appear() < 0 and WW_boss_hp_point() < 0 and WW_lacox() > 0 Then // and WW_ÈÎÎñºÍÖÕ¶ËÍ¼±ê() > 0
                Delay double_jude_boss_die_time
                If WW_boss_hp_point() < 0 and WW_lacox() > 0 and WW_ÈÎÎñºÍÖÕ¶ËÍ¼±ê() > 0  Then
                    Exit Do
                End If
            End If
        Loop
    End If
    /*----------×Ô¶¨ÒåÕ½¶·Ïß³ÌÍ£Ö¹---------*/
    StopThread thread×Ô¶¨ÒåÕ½¶·½Å±¾//Í£Ö¹×Ô¶¨ÒåÕ½¶·Ä£Ê½
End Sub
//Ë÷µÐÏß³Ì(¼ì²âµ½Ã»ÓÐË÷µÐÍ¼±êÌáÊ¾¾Í½øÐÐË÷µÐ²Ù×÷)
Sub lock_on()
    Do
        If lock_onx() < 0 Then//Î´¼ì²âË÷µÐÍ¼±ê 
            MiddleClick 1//Êó±êÖÐ¼üË÷µÐ
        End If
    Loop
End Sub
//Ò»Ö±Æ½a(Ä¬ÈÏÕ½¶·Ïß³Ì)
Sub all_a()
    Do
        LeftClick 1
    Loop 
End Sub
//Ò»Ö±ÊÍ·Å¹²Ãù¼¼ÄÜ¡¢Éùº§¼¼ÄÜ¡¢¹²Ãù½â·Å(Ä¬ÈÏÕ½¶·Ïß³Ì)
Sub all_qer()
    Do
        q 100//Éùº§¼¼ÄÜ
        e 100//¹²Ãù¼¼ÄÜ
        r 100//¹²Ãù½â·Å(Ó°Ïìµ¥Ïß³ÌµÄÖ÷ÒªÒòËØ)
    Loop
End Sub
//Ò»Ö±ÇÐ½ÇÉ«(Ä¬ÈÏÕ½¶·Ïß³Ì)
Sub switch_role()
    Do
        ch3
        Delay ch3_delay
        ch2 
        Delay ch2_delay
        ch1 
        Delay ch1_delay
        ÖØ»÷ 400,1000
    Loop 
End Sub
//×Ô¶¨ÒåÕ½¶·½Å±¾
Sub ×Ô¶¨ÒåÕ½¶·½Å±¾()
    MessageBox "Ã»Ð´"
End Sub


/*==========ÎÞÒôÇøÕ½¶·Í¼É«==========*/
//µÈ´ý¼ÆÊ±Æ÷³öÏÖ(¼´ÎªµÈ´ý¹ÖÎï³öÏÖ)
Sub WW_timer()
    Do Until WW_timerx() > 0
        Delay 100
    Loop
End Sub
//Ãù³±¼ÆÊ±Æ÷£¨ÎÞÒôÇø¡¢ËþµÈ£©
Function WW_timerx()
    XY=Plugin.Color.FindMutiColor(871,124,1056,171,"FFFFFF","0|1|FFFFFF,0|4|FFFFFF,0|7|FFFFFF,3|7|FFFFFF,6|7|FFFFFF,7|7|FFFFFF,69|16|FFFFFF,69|5|FFFFFF,116|4|FFFFFF,116|16|FFFFFF",0.9)
    MyArray = Split(XY, "|")
    WW_timerx = CInt(MyArray(0)): WW_timery = CInt(MyArray(1))
End Function
//ÌôÕ½³É¹¦µÄÍ¼±ê(ÎÞÓ°ÇøµÄ£¬²»ÖªµÀÄÜ²»ÄÜÇ¨ÒÆ)Ä¿Ç°ÊÇ¼ì²â¶à²¨´Î»÷É±¹ÖµÄ¹Ø¼üµã
Function challenge_complete()
    XY=Plugin.Color.FindMutiColor(860,255,1062,314,"DCF8FF","0|-14|DCF8FF,16|0|DCF8FF,27|-1|DCF8FF,50|-2|DCF8FF,51|-13|DCF8FF,70|-9|DCF8FF,72|8|DCF8FF,95|10|DCF8FF,95|-5|DCF8FF,115|-13|DCF8FF,114|-4|DCF8FF,141|-5|DCF8FF,161|-14|DCF8FF,164|7|DCF8FF",0.9)
    MyArray = Split(XY, "|")
    challenge_complete = CInt(MyArray(0)): Y = CInt(MyArray(1))	
End Function
//ÎÞÒôÇøÇåÀíÈÎÎñÍ¼±ê(¿ªÆôÎÞÒôÇøºóµÄÍ¼±ê,×ÖÌåÊÇÇåÀíÎÞÒôÇøÖÐÓ¿ÏÖµÄ²ÐÏó)
Function WW_mission_enemy()
    XY=Plugin.Color.FindMutiColor(0,259,462,1080,"FFFFFF","-1|-2|FFFFFF,-3|-3|FFFFFF,-3|-6|FFFFFF,-5|-5|FFFFFF,-7|-4|FFFFFF,-7|-6|FFFFFF,-6|-8|FFFFFF,28|-1|FFFFFF,28|-11|FFFFFF,28|-18|FFFFFF,48|-11|FFFFFF,42|-11|FFFFFF,36|-11|FFFFFF,40|-4|FFFFFF,70|-18|FFFFFF,70|-13|FFFFFF,70|-8|FFFFFF,70|-3|FFFFFF,70|3|FFFFFF,94|-9|FFFFFF,94|-18|FFFFFF,123|-18|FFFFFF,123|-3|FFFFFF,154|-7|FFFFFF",0.9)
    MyArray = Split(XY, "|")
    WW_mission_enemy = CInt(MyArray(0)): Y = CInt(MyArray(1))
End Function
//¼ì²âÆô¶¯Ë÷µÐµÄÍ¼±ê0.7×îÎÈ¶¨(¸öÈË¸Ð¾õ¼ì²âµ¥µãºÃÁË£¬»¹¼ì²âÊ²Ã´¶àµã)
Function lock_onx()
    XY=Plugin.Color.FindMutiColor(1368,952,1412,997,"EFECEC","0|-7|EEEBEB,5|-13|EEEBEB,-5|-13|EEEBEB,12|-10|EDEBEB,-12|-11|EFEBEC,0|-21|2C99AC",0.7)
    MyArray = Split(XY, "|")
    lock_onx = CInt(MyArray(0)): lock_ony = CInt(MyArray(1))
End Function




Goto ÍùÏÂ×ß
Rem ¶¨Òå
Global WW_selcet_tr_su_number//Ñ¡ÔñÎÞÒôÇå½Ë(Tracet Suppression)4

/*--------------------------------------------------ÓÃ»§Ñ¡Ôñ½»»¥-----------------------------------------------*/
//0Îª¹Ø±Õ£¬1Îª¿ªÆô(ÓÎÏ·Â·¾¶ÊÇÖ±½ÓÊ¹ÓÃ,²»¿ÉÖØ¶¨Òå)
Global UID_similarity : UID_similarity = Form1.UIDÏàËÆ¶È.Text//UIDµÄÏàËÆ¶È,¾­³£ÓÃµ½0.7×îÎÈ¶¨,¸ÄÁË½Å±¾Ö±½Ó·ÏÁË
Global picture_color_similarity : picture_color_similarity = Form1.½Å±¾Í¼ÏñÑÕÉ«µÄÏàËÆ¶È.Text //½Å±¾Í¼ÏñÑÕÉ«µÄÏàËÆ¶È
Global ×Ô¶¨ÒåÕ½¶· : ×Ô¶¨ÒåÕ½¶· = Form1.×Ô¶¨ÒåÕ½¶·.ListIndex //Ñ¡ÔñÄ¬ÈÏµÄ1ÃëËÙÇÐ»¹ÊÇ×Ô¶¨ÒåµÄÕ½¶·Ä£Ê½(ÓÃ»§×Ô¶¨Òå)
Global ch1_delay : ch1_delay = Form1.Ò»ºÅ½ÇÉ«×¤³¡Ê±¼ä.Text * 1000//Ò»ºÅ½ÇÉ«×¤³¡Ê±¼ä(ÓÃ»§×Ô¶¨Òå)
Global ch2_delay : ch2_delay = Form1.¶þºÅ½ÇÉ«×¤³¡Ê±¼ä.Text * 1000//¶þºÅºÅ½ÇÉ«×¤³¡Ê±¼ä(ÓÃ»§×Ô¶¨Òå)
Global ch3_delay : ch3_delay = Form1.ÈýºÅ½ÇÉ«×¤³¡Ê±¼ä.Text * 1000//ÈýºÅ½ÇÉ«×¤³¡Ê±¼ä(ÓÃ»§×Ô¶¨Òå)
/*-----------------------------------------ÈÈ¼üÐÞ¸Ä(×Ü¹²36¸öÈÈÈÈ¼ü¿ÉÐÞ¸Ä)--------------------------------------*/
Global Move_forward : Move_forward = Form1.ÏòÇ°ÒÆ¶¯.Text//ÏòÇ°ÒÆ¶¯
Global Move_backward : Move_backward = Form1.ÏòºóÒÆ¶¯.Text//ÏòºóÒÆ¶¯
Global Move_left : Move_left = Form1.Ïò×óÒÆ¶¯.Text//Ïò×óÒÆ¶¯
Global Move_right : Move_right = Form1.ÏòÓÒÒÆ¶¯.Text//ÏòÓÒÒÆ¶¯
Global Walk_or_Run : Walk_or_Run = Form1.×ßÅÜÇÐ»».Text//×ßÅÜÇÐ»»//×ß/ÅÜÇÐ»»
Global Dash_or_Dodge : Dash_or_Dodge = Form1.³å´ÌÉÁ±Ü.Text//³å´ÌÉÁ±Ü//³å´Ì/ÉÁ±Ü
Global Resonance_Skill : Resonance_Skill = Form1.¹²Ãù¼¼ÄÜ.Text//¹²Ãù¼¼ÄÜ
Global Resonance_Liberation : Resonance_Liberation = Form1.¹²Ãù½â·Å.Text//¹²Ãù½â·Å
Global Use_Utility : Use_Utility = Form1.Ì½Ë÷¹¤¾ß.Text//Ì½Ë÷¹¤¾ß
Global Utility_Wheel : Utility_Wheel = Form1.Ä£¿éÂÖÅÌ.Text//Ä£¿éÂÖÅÌ//Ì½Ë÷Ä£¿éÂÖÅÌ
Global Echo_Skill : Echo_Skill = Form1.Éùº¡¼¼ÄÜ.Text//Éùº¡¼¼ÄÜ
Global Switch_to_Aim_Mode : Switch_to_Aim_Mode = Form1.ÇÐ»»Ãé×¼.Text//ÇÐ»»Ãé×¼//ÇÐ»»Ãé×¼Ä£Ê½
Global Jump : Jump = Form1.ÌøÔ¾.Text//ÌøÔ¾
Global Drop_Down_when_Climbing : Drop_Down_when_Climbing = Form1.ÅÊÅÀÊ±ÂäÏÂ.Text//ÅÊÅÀÊ±ÂäÏÂ
Global Pick_Up_or_Interact : Pick_Up_or_Interact = Form1.Ê°È¡½»»¥.Text//Ê°È¡½»»¥//Ê°È¡/½»»¥
Global Switch_to_Team_Member_1 : Switch_to_Team_Member_1 = Form1.ÇÐ»»±à¶Ó1ºÅ¶ÓÔ±.Text//ÇÐ»»±à¶Ó1ºÅ¶ÓÔ±
Global Switch_to_Team_Member_2 : Switch_to_Team_Member_2 = Form1.ÇÐ»»±à¶Ó2ºÅ¶ÓÔ±.Text//ÇÐ»»±à¶Ó2ºÅ¶ÓÔ±
Global Switch_to_Team_Member_3 : Switch_to_Team_Member_3 = Form1.ÇÐ»»±à¶Ó3ºÅ¶ÓÔ±.Text//ÇÐ»»±à¶Ó3ºÅ¶ÓÔ±
Global Switch_to_Team_Member_4 : Switch_to_Team_Member_4 = Form1.ÇÐ»»±à¶Ó4ºÅ¶ÓÔ±.Text//ÇÐ»»±à¶Ó4ºÅ¶ÓÔ±
Global Track_Quest : Track_Quest = Form1.ÈÎÎñ×·×Ù.Text//ÈÎÎñ×·×Ù
Global Quit_Challenge : Quit_Challenge = Form1.ÖÐ¶ÏÌôÕ½.Text//ÖÐ¶ÏÌôÕ½
Global Quick_Access_Wheel : Quick_Access_Wheel = Form1.¹¦ÄÜÈë¿ÚÂÖÅÌ.Text//¹¦ÄÜÈë¿ÚÂÖÅÌ
Global Mail : Mail = Form1.ÓÊ¼þ.Text//ÓÊ¼þ
Global Map1 : Map1 = Form1.µØÍ¼.Text//µØÍ¼
Global Quests : Quests = Form1.ÈÎÎñ.Text//ÈÎÎñ
Global Team : Team = Form1.±à¶Ó.Text//±à¶Ó
Global Backpack : Backpack = Form1.±³°ü.Text//±³°ü
Global Resonator : Resonator = Form1.¹²ÃùÕß.Text//¹²ÃùÕß
Global Utilities : Utilities = Form1.Ì½Ë÷Ä£¿é.Text//Ì½Ë÷Ä£¿é
Global Tutorial : Tutorial = Form1.½Ì³Ì°Ù¿Æ.Text//½Ì³Ì°Ù¿Æ
Global Chat : Chat = Form1.ÁÄÌì.Text//ÁÄÌì
Global Events : Events = Form1.»î¶¯.Text//»î¶¯
Global Guidebook : Guidebook = Form1.Ë÷À­Ö¸ÄÏ.Text//Ë÷À­Ö¸ÄÏ
Global Convene : Convene = Form1.»½È¡.Text//»½È¡
Global Pioneer_Podcast : Pioneer_Podcast = Form1.ÏÈÔ¼µçÌ¨.Text//ÏÈÔ¼µçÌ¨
Global Co_op_Mode : Co_op_Mode = Form1.¶àÈËÓÎÏ·.Text//¶àÈËÓÎÏ·
Goto ¿ªÊ¼
Rem ÍùÏÂ×ß
/*------------------------------------------------½Å±¾Í¼É«·â×°-------------------------------------------------*/
/*=============½øÈëÓÎÏ·½çÃæº¯Êý·â×°=============*/
//Ãù³±Æô¶¯Æ÷Æô¶¯½øÈë°´¼ü¼ì²â
Function WW_launcherx()
    XY=Plugin.Color.FindMutiColor(0,0,1920,1080,"E6E6E6","4|37|E6E6E6,25|37|E6E6E6,25|-5|E6E6E6,74|-5|E6E6E6,74|34|E6E6E6,120|34|E6E6E6,120|6|E6E6E6,145|3|E6E6E6,145|15|E6E6E6,145|31|E6E6E6,11|9|333333,19|9|E6AF75,22|7|333333,21|17|333333,21|22|333333,31|21|333333,34|14|333333,34|6|555555,41|6|333333,41|11|333333,41|19|335593,46|24|333333,46|14|333333",picture_color_similarity)
    MyArray = Split(XY, "|")
    WW_launcherx = CInt(MyArray(0)): WW_launchery = CInt(MyArray(1))
End Function
//½øÈëÓÎÏ·×ÖÌå¼ì²â(¼ì²âµã»÷Á¬½ÓºÍÍË³öµÄ×ÖÌå)
Function WW_come_gamex()
    XY=Plugin.Color.FindMutiColor(0,0,1920,1080,"FFFFFF","-6|0|FFFFFF,-10|0|FFFFFF,-14|0|FFFFFF,-17|0|FFFFFF,-19|0|FFFFFF,-19|7|FFFFFF,-17|7|FFFFFF,-13|7|FFFFFF,-10|7|FFFFFF,-6|7|FFFFFF,-2|7|FFFFFF,0|7|FFFFFF,0|12|FFFFFF,0|18|FFFFFF,0|19|FFFFFF,-4|19|FFFFFF,-8|19|FFFFFF,-13|19|FFFFFF,-17|19|FFFFFF,-19|15|FFFFFF,24|15|FFFFFF,24|12|FFFFFF,30|12|FFFFFF,17|12|FFFFFF,17|6|FFFFFF,22|6|FFFFFF,26|6|FFFFFF,30|6|FFFFFF,40|1|FFFFFF,40|11|FFFFFF,40|17|FFFFFF,835|-33|3CB4FF,849|-33|3CB4FF,867|-33|3CB4FF,878|-33|3CB4FF,885|-33|3CB4FF,888|12|3CB4FF,835|22|3CB4FF",picture_color_similarity)
    MyArray = Split(XY, "|")
    WW_come_gamex = CInt(MyArray(0)): WW_come_gamey = CInt(MyArray(1))
End Function
    /*==============³õÊ¼»¯ÓÎÏ·ÉèÖÃ·â×°=============*/
//¼ì²âÖÕ¶Ë½çÃæ¼ÓÔØÍê³É
Sub WW_esc_co()
    Do Until WW_esc_cox() > 0
        Delay 2000
        If WW_esc_cox() < 0 Then
            esc 1000
        End If
    Loop
End Sub
//¼ì²âÖÕ¶Ë½çÃæ(¼ì²âÖÕ¶Ë×óÉÏ½Ç,ÓÃÀ´¼ì²â´ò¿ªÖÕ¶Ë¼ÓÔØ)
Function WW_esc_cox()
    XY=Plugin.Color.FindMutiColor(0,0,1920,1080,"CEE7EA","0|-4|CEE7EA,3|-4|CEE7EA,-4|-3|CEE7EA,0|-8|CEE7EA,10|-10|CEE7EA,10|-13|CEE7EA,13|-13|CEE7EA,6|-13|CEE7EA,10|-17|CEE7EA,0|-20|CEE7EA,0|-23|CEE7EA,3|-23|CEE7EA,-4|-24|CEE7EA,0|-27|CEE7EA,-10|-17|CEE7EA,-10|-14|CEE7EA,-10|-10|CEE7EA,-7|-13|CEE7EA,-14|-14|CEE7EA,40|-2|CEE7EA,39|-8|CEE7EA,39|-17|CEE7EA,51|-21|CEE7EA,60|-22|CEE7EA,55|-15|CEE7EA,84|-20|CEE7EA,84|-23|CEE7EA,84|-15|CEE7EA,88|-15|CEE7EA,78|-15|CEE7EA,90|-22|CEE7EA,78|-22|CEE7EA",picture_color_similarity)
    MyArray = Split(XY, "|")
    WW_esc_cox = CInt(MyArray(0)) : WW_esc_coy = CInt(MyArray(1))
End Function
//¼ì²âÉèÖÃ°´Å¥
Function WW_setx()
    XY=Plugin.Color.FindMutiColor(0,0,1920,1080,"FFFFFF","3|-6|FFFFFF,20|-15|FFFFFF,27|-13|FFFFFF,42|-6|FFFFFF,45|-1|FFFFFF,44|18|FFFFFF,41|22|FFFFFF,26|32|FFFFFF,19|32|FFFFFF,4|21|FFFFFF,0|17|FFFFFF",picture_color_similarity)
    MyArray = Split(XY, "|")
    WW_setx = CInt(MyArray(0)) : WW_sety = CInt(MyArray(1))
    WW_setx = WW_setx + 20
End Function
//ÉèÖÃÖÐ¾µÍ·ÖØÖÃ¿ª¹Ø
Function camera_reset_x()
    XY=Plugin.Color.FindMutiColor(0,0,1920,1080,"FFFFFF","0|-4|FFFFFF,0|-7|FFFFFF,0|-11|FFFFFF,0|-12|FFFFFF,8|-7|FFFFFF,19|-7|FFFFFF,28|-6|FFFFFF,32|-6|FFFFFF,35|-6|FFFFFF,37|-6|FFFFFF,39|-6|FFFFFF,41|-6|FFFFFF,43|-6|FFFFFF,45|-6|FFFFFF,46|-6|FFFFFF,48|-6|FFFFFF,48|-6|FFFFFF,67|2|FFFFFF,67|1|FFFFFF,67|-1|FFFFFF,67|-3|FFFFFF,67|-5|FFFFFF,67|-6|FFFFFF,67|-8|FFFFFF,67|-9|FFFFFF,67|-11|FFFFFF,67|-12|FFFFFF,67|-14|FFFFFF,67|-15|FFFFFF,67|-17|FFFFFF,105|1|FFFFFF,105|-2|FFFFFF,105|-4|FFFFFF,105|-6|FFFFFF,105|-7|FFFFFF,88|-7|FFFFFF,88|-3|FFFFFF,88|-2|FFFFFF,88|0|FFFFFF,88|2|FFFFFF",picture_color_similarity)
    MyArray = Split(XY, "|")
    camera_reset_x = CInt(MyArray(0)) : camera_reset_y = CInt(MyArray(1))
    camera_reset_x = camera_reset_x + 1400 : camera_reset_y = camera_reset_y - 15
End Function
/*=============·ºÓÃ½çÃæÅÐ¶Ï¼°º¯Êý=============*/
//Ãù³±ÔÂ¿¨(²âÊÔÁËÒ»¸öÖÜÆÚ)
Function WW_mcx()
    XY=Plugin.Color.FindMutiColor(0,0,1920,1080,"0DA7D4","-40|35|208CB3,151|156|188BB5,542|61|0E87AB,493|29|69E6F7,471|96|FDFFFF,471|115|FDFFFF,471|128|FDFFFF,471|140|FDFFFF,537|210|FDFFFF,537|201|FDFFFF,537|194|FDFFFF,439|122|7AB2D7,431|138|7DB3D5,163|88|77B0D7,137|64|76B1D7,137|48|76B1D7,147|35|75B0D7",picture_color_similarity)
    MyArray = Split(XY, "|")
    WW_mcx = CInt(MyArray(0)): WW_mcy = CInt(MyArray(1))
End Function
//Ãù³±ÓÎÏ·Ö÷½çÃæ¼ÓÔØÍê³É(°üÀ¨´øÁËÃ»Éùº§ºÍ)
Sub WW_laco()//ÅÐ¶Ï¼ÓÔØÍê³ÉÓÎÏ·Ö÷½çÃæ(UIDºÍÈÎÎñÒÔ¼°ÖÕ¶Ë°´Å¥)
    Do Until WW_lacox() > 0 and WW_lacox_add_x() > 0
        Delay 1000
    Loop
End Sub
//¼ì²âÌØÕ÷Âë(¼ÓÔØÊ±ÌØÕ÷Âë»áÏûÊ§)0.9ÓÐÊ±ºò¼ì²â²»µ½,¼ÓÁËÏÞ¶¨·¶Î§ºó·¢ÏÖ0.7×îÎÈ
Function WW_lacox()
    XY=Plugin.Color.FindMutiColor(1690,1057,1776,1080,"FFFFFF","0|-8|FFFFFF,-30|-8|FFFFFF,-30|-6|FFFFFF,-35|-6|FFFFFF,-35|-5|FFFFFF,-40|-5|FFFFFF,-40|-4|FFFFFF",UID_similarity)
    //    XY=Plugin.Color.FindMutiColor(1690,1057,1776,1080,"FDFDFD","0|-7|FFFFFF,0|-13|FFFFFF,0|-16|FDFDFD,9|-16|FAFAF9,9|-15|FFFFFF,9|-13|FAFAFA,11|-9|FFFFFF,11|-6|FFFFFF,11|-3|FFFFFF,19|-1|FFFFFF,19|-4|FFFFFF,19|-7|FFFFFF,29|-13|FFFFFF,29|-9|FFFFFF,29|-4|FFFFFF,40|-16|F1F1F0,48|-16|FBFBFB",UID_similarity)
    MyArray = Split(XY, "|")
    WW_lacox = CInt(MyArray(0)): WW_lacoy = CInt(MyArray(1))
End Function
//¼ì²âUIDºÍÈÎÎñÒÔ¼°ÖÕ¶Ë°´Å¥
Function WW_lacox_add_x()
    XY=Plugin.Color.FindMutiColor(0,0,1920,1080,"FFFFFF","-3|0|FFFFFF,-3|-3|FFFFFF,-3|4|FFFFFF,-8|0|FFFFFF,-1797|194|FFFFFF,-1800|194|FFFFFF,-1805|194|FFFFFF,-1812|194|FFFFFF,-1817|194|FFFFFF,-1818|194|FFFFFF,-1818|190|FFFFFF,-1818|186|FFFFFF,-1818|181|FFFFFF,-1818|177|FFFFFF,-1818|173|FFFFFF,-1818|171|FFFFFF,-1818|167|FFFFFF,-1818|163|FFFFFF,-1818|161|FFFFFF,-1815|161|FFFFFF",picture_color_similarity)
    MyArray = Split(XY, "|")
    WW_lacox_add_x = CInt(MyArray(0)): WW_lacox_add_y = CInt(MyArray(1))
End Function
//Í¨ÓÃF¼ì²â(Ä¿Ç°ÖªµÀÖ»ÒªÓÐ»¥¶¯¶¼¿ÉÒÔ¼ì²âµ½)
Function WW_f_scanx()
    XY=Plugin.Color.FindMutiColor(0,0,1920,1080,"D9E5EC","0|-6|D9E5EC,0|-12|D9E5EC,0|-17|D9E5EC,0|-22|D9E5EC,0|-27|D9E5EC,0|-32|D9E5EC,0|-36|D9E5EC,0|-41|D9E5EC,0|-44|D9E5EC,21|-24|FFFFFF,21|-20|FFFFFF,21|-15|FFFFFF,33|-12|FFFFFF,33|-28|FFFFFF,42|-20|FFFFFF,25|-20|FFFFFF,46|-24|FFFFFF,46|-20|FFFFFF,46|-15|FFFFFF",picture_color_similarity)
    MyArray = Split(XY, "|")
    WW_f_scanx = CInt(MyArray(0)): WW_f_scany = CInt(MyArray(1))
End Function
/*=============µØÍ¼½çÃæº¯Êý¼°»Ø³Çº¯Êý=============*/
//³õÊ¼»¯µØÍ¼
Sub WW_in_map()
    map 1000
    Do Until WW_map_cox() > 0//¼ì²â³É¹¦´ò¿ªµØÍ¼
        Delay 1000
    Loop
    Delay 1000//·ÀÖ¹¿¨¶Ù
    ml 1810, 452, 200, 500//µã»÷ºó»áÓÐ0.5¸öÏñËØµãµÄÆ«²î
    map 500
    Call WW_laco()//¼ì²âÒÑ¾­·µ»ØÓÎÏ·Ö÷½çÃæ
End Sub
//È¥µ½½ñÖÝµÄÖÐÊàÐÅ±ê
Sub WW_jinzhou_rb()
    f2 2000
    ml 73 ,175, 200, 1000//µã»÷»îÔ¾¶È
    Do Until WW_re_chx() > 0//¼ì²âÊéµÄ¶ÌÔÝ¼ÓÔØ
        Delay 1000
    Loop
    ml WW_re_chx, WW_re_chy, 200, 300//µã»÷ÖÜÆÚÌôÕ½
    ml 424, 286, 200, 300//µã»÷Ç°ÍùÄ£ÄâÁìÓò
    ml 1725, 261, 200, 2200//µã»÷Ç°Íù¹²ÃùÕß¾­Ñé¸±±¾(ÔÚ½ñÖÝ)
    ml 901, 720, 200, 500//µã»÷ÖÐÊàÐÅ±ê,²»µ÷ÓÃÊÇÒòÎª·ÀÖ¹×Ô¼ººÍ×ø±êÖØµþµ¼ÖÂ¼ì²â²»µ½(ÒòÎªÄ³ÈË²Å·¢ÏÖ¿¨ÁË)
    Do Until WW_selcet_rbx() > 0 or WW_ftx() > 0//µÈ´ýÖ÷³ÇÍ¼±ê¼ÓÔØÍê±Ï(¸½½üÓÐÐÅ±êÑ¡ÏîÍ¼±ê»òÂÃÐÐ°´Å¥Í¼±ê)
        Delay 100
    Loop
    Call WW_selcet_rb()//´«ËÍÖÐÊàÐÅ±ê²¢¼ì²â¼ÓÔØÍê³É
End Sub
//µã»÷ÖÐ¼ä,½èÎ»ÐÅ±êÑ¡Ïî¼Ó¼ì²â¼ÓÔØ
Sub WW_wp()
    If Form1.¼ì²âÎÞÐÅ±êÄÜ·ñ´«ËÍ.ListIndex = 1 Then //¿ªÆôÑ¡Ïî
        Delay 1000
        If WW_ftx() < 0 Then //¼ì²â¿ìËÙ´«ËÍµÄÍ¼±êÅÐ¶ÏÊÇ·ñÓÀ¾Ã½âËø¸½½ü´«ËÍ
            MessageBox "ÇëÊÖ¶¯È¥µ½bossµãÎ»,Òªboss³öÏÖÑªÌõ,ÖØÐÂÆô¶¯½Å±¾¡£Èç¹ûÏÂ´ÎÆô¶¯½Å±¾»¹ÓÐÕâ¸ö±¨´íÇëÈ¥½Å±¾µÄ½çÃæ,ÕÒµ½¡°¼ì²âÎÞÐÅ±êÄÜ·ñ´«ËÍ¡±ÅÔ±ßµÄÏÂÀ­¿òÑ¡Ôñ¹Ø±Õ,µã¾Í±£´æÅäÖÃºóÔÙ´ÎÆô¶¯½Å±¾¡£Èç¹ûÇ°ÃæµÄ²½Öè¶¼ÊÔ¹ýÁË¾ÍÈ¥ÈºÀïÕÒÈË°ïÃ¦¿´¿´°É"
            ExitScript
        End If
    End If
    If open_WW_wp = 0 Then 
        ml 1593, 994, 200, 500//µã»÷¿ìËÙÂÃÐÐ
        Call WW_laco()//ÅÐ¶Ï¼ÓÔØÍê³ÉÓÎÏ·Ö÷½çÃæ
        Call space_boss_tp()//ÌØÊâ´¦ÀíµÄboss
    Else
        ml 954, 527, 200, 500//µã»÷¶¨Î»µã(±¾À´ÊÇ500ÒòÎªÄ³ÈËÌ«¿¨ÁËµ÷ÖÆ1000,°ÑÕâ¸ö²¿·Ö·Åµ½ÁË¿ªÍ·È¥)
        If WW_selcet_wpx() > 0 Then 
            ml WW_selcet_wpx, WW_selcet_wpy, 200, 500
            ml 1750, 986, 200, 500//µã»÷½èÎ»ÐÅ±êµÄ¿ìËÙÂÃÐÐ
            Call WW_laco()//ÅÐ¶Ï¼ÓÔØÍê³ÉÓÎÏ·Ö÷½çÃæ
            If WW_selcet_boss_ch_number = 9 and Form1.¾ÛÐµ»úÅ¼.Value = 1 and ¾ÛÐµ»úÅ¼Éùº§ÊýÁ¿ <> CInt(Form1.¾ÛÐµ»úÅ¼1.Text) Then ////¶Ô»úÐµ×öÌØÊâ´¦Àí
                Delay 14000//²âÊÔµÄµÃµ½×îÉÙµÄËÕÐÑÁ¿ÑªÌõµÄÊ±¼äÊÇ14.8Ãë
            End If
            If WW_weekly_ch_number = 4 and Form1.ÃùÖÓÖ®¹ê.Value = 1 and ÃùÖÓÖ®¹êÉùº§ÊýÁ¿ <> CInt(Form1.ÃùÖÓÖ®¹ê1.Text) Then//¶Ô¹ê×öÌØÊâ´¦Àí 
                Delay 14000//×îÉÙÇ°½ø5Ãë¹ê²Å»á¿ªÊ¼ËÕÐÑ,ËÕÐÑÊ±¼äÊÇ14.3Ãë
            End If//¼ÓWW_weekly_ch_numberÊÇÎªÁËÖ»ÓÐµ±Ç°ÊÇÃùÖÓÖ®¹ê²ÅÓÐÕâ¸ö²Ù×÷
        ElseIf no_wpx_error_message = 1
            MessageBox "Ç°ÍùµÄÇøÓòÎ´·ÅÖÃ½èÎ»ÐÅ±ê"
            ExitScript //Ã»¼ì²âµ½½èÎ»ÐÅ±êÍ£Ö¹½Å±¾
        ElseIf WW_selcet_boss_ch_number = 8 Then//»ÔÓ©¾üÊÆÔÚµØÏÂÈç¹ûÃ»ÓÐÐÅ±êµãÁË»áÓÐ¸½½üµÄÃªµã,Ê§È¥¿ìËÙÂÃÐÐµÄ°´Å¥
            ml 1337, 543, 200, 500//µã»÷Ð¡µÄ»ÔÓ©¾üÊÆÍ¼±ê,ÖØÐÂ»ñµÃ¿ìËÙÂÃÐÐµÄ°´Å¥
            ml 1593, 994, 200, 500//µã»÷¿ìËÙÂÃÐÐ
            Call WW_laco()//ÅÐ¶Ï¼ÓÔØÍê³ÉÓÎÏ·Ö÷½çÃæ
        Else 
            ml 1593, 994, 200, 500//µã»÷¿ìËÙÂÃÐÐ
            Call WW_laco()//ÅÐ¶Ï¼ÓÔØÍê³ÉÓÎÏ·Ö÷½çÃæ
            Call space_boss_tp()//ÌØÊâ´¦ÀíµÄboss
        End If
    End If
End Sub
//´«ËÍÐèÒª×öÌØÊâ´¦ÀíµÄboss
Sub space_boss_tp()
    If WW_selcet_boss_ch_number = 9 and Form1.¾ÛÐµ»úÅ¼.Value = 1 and ¾ÛÐµ»úÅ¼Éùº§ÊýÁ¿ <> CInt(Form1.¾ÛÐµ»úÅ¼1.Text) Then ////¶Ô»úÐµ×öÌØÊâ´¦Àí
        wwrun 3000, 0
        ÖØ»÷ 1000, 1000
        wwrun 2500,10000
    End If
    If WW_weekly_ch_number = 4 and Form1.ÃùÖÓÖ®¹ê.Value = 1 and ÃùÖÓÖ®¹êÉùº§ÊýÁ¿ <> CInt(Form1.ÃùÖÓÖ®¹ê1.Text) Then//¶Ô¹ê×öÌØÊâ´¦Àí 
        wwrun 2500, 14000//×îÉÙÇ°½ø5Ãë¹ê²Å»á¿ªÊ¼ËÕÐÑ,ËÕÐÑÊ±¼äÊÇ14.3Ãë
    End If//¼ÓWW_weekly_ch_numberÊÇÎªÁËÖ»ÓÐµ±Ç°ÊÇÃùÖÓÖ®¹ê²ÅÓÐÕâ¸ö²Ù×÷
End Sub
//ÖÐÊàÐÅ±êÑ¡Ïî´«ËÍ¼Ó¼ì²â¼ÓÔØ
Sub WW_selcet_rb()
    If WW_selcet_rbx() > 0 Then 
        ml WW_selcet_rbx, WW_selcet_rby, 200, 300
    End If
    ml WW_ftx, WW_fty, 200, 300//µã»÷¿ìËÙÂÃÐÐ
    Call WW_laco()//ÅÐ¶Ï¼ÓÔØÍê³ÉÓÎÏ·Ö÷½çÃæ
End Sub
//¼ì²âµØÍ¼Ëõ·ÅµÄ¼Ó¼õºÍÓÒÉÏ½ÇµÄX
Function WW_map_cox()
    XY=Plugin.Color.FindMutiColor(0,0,1920,1080,"FFFFFF","0|5|FFFFFF,0|10|FFFFFF,6|6|FBFBFA,-6|6|FCFCFC,-7|426|FFFFFF,1|426|FFFFFF,5|426|FFFFFF,-10|-257|CFFAFF,7|-257|CFFAFF,7|-242|CFFAFF,-8|-242|CFFAFF",picture_color_similarity)
    MyArray = Split(XY, "|")
    WW_map_cox = CInt(MyArray(0)): WW_map_coy = CInt(MyArray(1))
End Function
//¼ì²â"¿ìËÙ´«ËÍ"(Fast Travel)(²»°üÀ¨½èÎ»ÐÅ±êµÄ¿ìËÙ´«ËÍ)
Function WW_ftx()
    XY=Plugin.Color.FindMutiColor(0,0,1920,1080,"FFFFFF","0|-8|FFFFFF,0|-21|FFFFFF,12|-19|FFFFFF,19|-15|FFFFFF,41|-20|FFFFFF,57|-17|FFFFFF,103|-10|FFFFFF,103|-5|FFFFFF,116|-30|000000,116|7|000000,-7|7|000000,-7|-29|000000",picture_color_similarity)	
    MyArray = Split(XY, "|")
    WW_ftx = CInt(MyArray(0)) : WW_fty = CInt(MyArray(1))
End Function
//¼ì²âµØ±íÖÐÊàÐÅ±êResonance Beacon(¹²ÕñÁ¬½á)(Ä¿Ç°»¹Ã»ÓÐµØÏÂµÄ)
Function WW_rbx()
    XY=Plugin.Color.FindMutiColor(0,0,1920,1080,"FFFB90","0|4|FFFB90,0|9|FFFB90,-11|9|FFFB90,-11|5|FFFB90,-11|1|FFFB90,-12|-12|FFFFFF,-5|-12|FFFFFF,0|-12|FFFFFF,-5|-2|FFFFFF,-6|1|FFFFFF,-6|6|FFFFFF,-5|9|FFFFFF,-5|12|FFFFFF,-20|-11|FFFFFF,-27|5|FFFFFF,16|5|FFFFFF,10|-10|FFFFFF",picture_color_similarity)
    MyArray = Split(XY, "|")
    WW_rbx = CInt(MyArray(0)) : WW_rby = CInt(MyArray(1))
End Function
//¼ì²âµØ±íÖÐÊàÐÅ±êÑ¡Ïî(Resonance Beacon¹²ÕñÁ¬½á)(Ä¿Ç°»¹Ã»ÓÐµØÏÂµÄ)
Function WW_selcet_rbx()
    XY=Plugin.Color.FindMutiColor(0,0,1920,1080,"FFFB90","5|0|FFFFFF,9|0|FFFB90,56|-2|D8E5EC,65|-2|D8E5EC,75|-2|D8E5EC,84|-1|D8E5EC,91|-1|D8E5EC,110|-1|D8E5EC,136|-1|D8E5EC,148|-10|D7E4EB",picture_color_similarity)
    MyArray = Split(XY, "|")
    WW_selcet_rbx = CInt(MyArray(0)) : WW_selcet_rby = CInt(MyArray(1))
End Function
//µØÏÂºÍµØÉÏµÄÐ¡ÐÍÐÅ±êÑ¡Ïî´«ËÍ¼Ó¼ì²â¼ÓÔØ(Ä¿Ç°µØÏÂºÍµØÉÏµÄÑ¡Ïî¶¼ÊÇÒ»ÑùµÄÍ¼±ê)
Sub WW_up_tp()
    If WW_selcet_up_tpx() > 0 Then 
        ml WW_selcet_up_tpx, WW_selcet_up_tpy, 200, 300
    End If
    ml WW_ftx, WW_fty, 200, 300//µã»÷¿ìËÙÂÃÐÐ
    Call WW_laco()//ÅÐ¶Ï¼ÓÔØÍê³ÉÓÎÏ·Ö÷½çÃæ
End Sub
//(µØÍ¼³õÊ¼´óÐ¡)¼ì²âµØ±íµÄÐ¡ÐÍÐÅ±ê
Function WW_up_tpx()
    XY=Plugin.Color.FindMutiColor(0,0,1920,1080,"FFFFFF","0|-1|FFFFFF,-1|-1|FFFFFF,-1|-2|FFFFFF,-1|0|FFFFFF,-2|-1|FFFFFF,-2|-2|FFFFFF,-3|-2|FFFFFF,-5|-3|FFFFFF,-6|0|FFFFFF,-12|0|FFFFFF,-6|-7|FFFFFF,-6|-11|FFFFFF,-6|-16|FAFD56,-6|-23|FAFD56,-6|-35|FAFD56,-6|-40|FFFFFF,0|-36|FFFFFF,-12|-36|FFFFFF,-12|-30|FFFFFF,-1|-30|FFFFFF,-1|-16|FFFFFF,-12|-16|FFFFFF",picture_color_similarity)
    MyArray = Split(XY, "|")
    WW_up_tpx = CInt(MyArray(0)) : WW_up_tpy = CInt(MyArray(1))
End Function
//µØ±íµÄÐ¡ÐÍÐÅ±êÑ¡Ïî¼ì²â
Function WW_selcet_up_tpx()
    XY=Plugin.Color.FindMutiColor(0,0,1920,1080,"FFFFFF","-8|0|FFFFFF,-3|-6|FFFFFF,-3|-13|FAFD56,-3|-19|FAFD56,-3|-28|FAFD56,-3|-33|FFFFFF,2|-28|FFFFFF,-8|-28|FFFFFF,-8|-13|FFFFFF,1|-13|FFFFFF,57|-14|D8E5EC,57|-22|D8E5EC,76|-27|D8E5EC,81|-27|D8E5EC,93|-23|D8E5EC,102|-16|D8E5EC,114|-18|D8E5EC,114|-22|CEDBE0,114|-26|D8E5EC,128|-19|D8E5EC,140|-16|D8E5EC",picture_color_similarity)
    MyArray = Split(XY, "|")
    WW_selcet_up_tpx = CInt(MyArray(0)): WW_selcet_up_tpy = CInt(MyArray(1))
End Function
//(µØÍ¼³õÊ¼´óÐ¡)¼ì²âµØÏÂµÄÐ¡ÐÍÐÅ±ê(ÔÚµÚÒ»²ã»¹ÊÇµÚ¶þ²ã¶¼¼ì²âµÃµ½)
Function WW_do_tpx()
    XY=Plugin.Color.FindMutiColor(0,0,1920,1080,"000000","7|4|000000,-8|5|000000,0|19|000000,8|15|000000,-9|15|000000,-19|0|FFFFFF,-19|-7|FAFE56,-19|-14|FAFD56,-19|-24|FAFD56,-14|-29|FFFFFF,-14|-8|FFFFFF,-24|-8|FFFFFF,-24|-24|FFFFFF",picture_color_similarity)
    MyArray = Split(XY, "|")
    WW_do_tpx = CInt(MyArray(0)) : WW_do_tpy = CInt(MyArray(1))
End Function
//¼ì²â½èÎ»ÐÅ±ê(Waypoint)Ä¿Ç°µØ±íºÍµØÏÂµÄÍ¼±ê¶¼Ò»Ñù
Function WW_wpx()
    XY=Plugin.Color.FindMutiColor(0,0,1920,1080,"F0F0F0","-1|6|313131,-4|5|313131,-5|2|313131,-14|-16|78DDFC,-14|-23|78DDFC,-14|-32|79DDFD,-14|-38|79DDFD,-8|-41|FDFDFD,-8|-34|FDFDFD,-8|-29|FCFCFC,-21|-29|FDFDFD,-21|-34|FDFDFD,-21|-40|FDFDFD,-20|-16|FCFCFC,-8|-16|FCFCFC",picture_color_similarity)
    MyArray = Split(XY, "|")
    WW_wpx = CInt(MyArray(0)) : WW_wpy = CInt(MyArray(1))
End Function
//½èÎ»ÐÅ±êÑ¡Ïî¼ì²â
Function WW_selcet_wpx()
    XY=Plugin.Color.FindMutiColor(0,0,1920,1080,"F6F6F6","-3|2|323232,-9|-7|FFFFFF,-5|-11|FFFFFF,-14|-12|FFFFFF,-10|-11|7BDFFF,-10|-17|7ADFFF,-10|-23|7ADFFF,-10|-27|7ADFFF,-5|-26|FFFFFF,-13|-26|FFFFFF,43|-19|D8E5EC,43|-13|D8E5EC,43|-9|D8E5EC,49|-8|D8E5EC,49|-11|D8E5EC,49|-14|D8E5EC,61|-14|D8E5EC,61|-11|D8E5EC,61|-8|D8E5EC,58|-25|D8E5EC,51|-25|D8E5EC,70|-21|D8E5EC,70|-14|D8E5EC,70|-7|D8E5EC,83|-6|D8E5EC,96|-16|D8E5EC,134|-15|D8E5EC,134|-10|D8E5EC",picture_color_similarity)
    MyArray = Split(XY, "|")
    WW_selcet_wpx = CInt(MyArray(0)): WW_selcet_wpy = CInt(MyArray(1))
End Function
/*=============Ë÷À­Ö¸ÄÏÑ¡Ôñ¼°ÅÐ¶Ï¼ì²â=============*/
//¼ì²âÇ°ÍùµÄÍ¼±ê
Function WW_gotox(gotox1, gotoy1, gotox2, gotoy2)
    XY=Plugin.Color.FindMutiColor(0,0,1920,1080,"FFFFFF","5|0|FFFFFF,15|0|FFFFFF,18|4|FAFAFA,18|9|FAFAFA,18|15|FAFAFA,13|14|F6F6F6,13|9|F6F6F6,13|5|F6F6F6,28|10|FFFFFF,28|14|FFFFFF,28|18|FFFFFF,40|18|FFFFFF,40|10|FFFFFF,40|2|FFFFFF,50|-3|000000,50|10|000000,50|19|000000,20|-9|121212,-10|-1|111111,-10|13|111111,-10|14|0C0C0C,-10|20|000000",picture_color_similarity)
    MyArray = Split(XY, "|")
    WW_gotox = CInt(MyArray(0)): WW_gotoy = CInt(MyArray(1))
End Function
//¼ì²âµã»÷Ë«±¶ÎÞÒôÇøºóË«±¶µÄÍ¼±ê(yÖáÒªÏòÏÂÒÆ¶¯49¸öÏñËØµã)
Function WW_double_scanx()
    XY=Plugin.Color.FindMutiColor(0,0,1920,1080,"5890A1","0|28|5890A1,16|15|E2F2F8,33|14|E2F2F8,50|14|E2F2F8,63|20|E2F2F8,94|16|E2F2F8,115|16|E2F2F8,126|18|E2F2F8,139|18|E2F2F8,156|20|E2F2F8,173|19|E2F2F8,189|9|E2F2F8,228|6|E2F2F8,228|16|E2F2F8,244|18|E2F2F8,246|8|E2F2F8,260|7|DEEFF6,271|9|E2F2F8,271|19|E2F2F8",picture_color_similarity)
    MyArray = Split(XY, "|")
    WW_double_scanx = CInt(MyArray(0)): WW_double_scany = CInt(MyArray(1))
End Function
//¼ì²âÕ½¸èÖØ×àÃ»ÓÐÌôÕ½´ÎÊý(ÖÜ±¾)(Weekly  Challenge)
Function WW_weekly_chx()
    XY=Plugin.Color.FindMutiColor(0,0,1920,1080,"D8E5EC","0|4|D8E5EC,0|14|D8E5EC,19|-2|D8E5EC,40|-2|D8E5EC,64|12|D8E5EC,96|12|D8E5EC,120|8|D8E5EC,141|16|D8E5EC,194|4|519FC1,194|8|519FC1,194|13|519FC1,205|11|519FC1,205|9|519FC1,205|5|519FC1,234|2|519FC1,235|13|519FC1",picture_color_similarity)
    MyArray = Split(XY, "|")
    WW_weekly_chx = CInt(MyArray(0)): WW_weekly_chy = CInt(MyArray(1))
End Function
//¼ì²âÆ¯²´ÈÕÖ¾£¨Milestones)Í¼±ê(ÔÝÊ±ÓÃ²»ÉÏ)
Function WW_mix()
    XY=Plugin.Color.FindMutiColor(0,0,1920,1080,"BABABA","-8|0|BBBBBB,-13|0|BBBBBB,-13|-10|BBBBBB,-13|-23|BBBBBB,-8|-23|BBBBBB,0|-23|BABABA,0|-32|BBBBBB,-6|-29|BBBBBB,2|-35|BBBBBB,12|-35|BBBBBB,19|-35|BBBBBB,19|-29|BBBBBB,13|-29|BBBBBB,7|-29|BBBBBB,4|-17|BBBBBB,4|-12|BBBBBB,4|-6|BBBBBB,7|-10|BBBBBB,7|-14|BBBBBB",picture_color_similarity)
    MyArray = Split(XY, "|")
    WW_mix = CInt(MyArray(0)): WW_miy = CInt(MyArray(1))
End Function
//¼ì²âÖÜÆÚÌôÕ½(Recurring Challenges)Í¼±ê(ºóÃæÒªÓÃÀ´µ±×öÆ«ÒÆ×ø±ê)
Function WW_re_chx()
    XY=Plugin.Color.FindMutiColor(0,0,1920,1080,"BBBBBB","-19|-16|BBBBBB,20|-16|BBBBBB,7|5|BBBBBB,-5|5|BBBBBB,-9|-24|BBBBBB,0|-24|BBBBBB,10|-24|BBBBBB",picture_color_similarity)
    MyArray = Split(XY, "|")
    WW_re_chx = CInt(MyArray(0)): WW_re_chy = CInt(MyArray(1))
End Function
//¼ì²âÇ¿ÕßÖ®Â·(Path of Growth)Í¼±ê
Function WW_Path_of_Growthx()
    XY=Plugin.Color.FindMutiColor(0,0,1920,1080,"BBBBBB","18|0|BBBBBB,18|10|BBBBBB,27|11|BBBBBB,27|11|BBBBBB,27|27|BBBBBB,22|33|BBBBBB,20|41|BBBBBB,10|41|BBBBBB,-7|41|BBBBBB,-14|25|BBBBBB,0|21|BBBBBB,-11|19|BBBBBB",picture_color_similarity)
    MyArray = Split(XY, "|")
    WW_Path_of_Growthx = CInt(MyArray(0)): WW_Path_of_Growthy = CInt(MyArray(1))
End Function
//¼ì²â²ÐÏóÌ½Ñ°(Echo Hunting)Í¼±ê(¼ÓÇ¿°æ)
Function WW_Ec_Hux()
    XY=Plugin.Color.FindMutiColor(0,0,1920,1080,"BBBBBB","0|-2|BBBBBB,0|-4|BBBBBB,0|-6|BBBBBB,8|-17|BBBBBB,6|-17|BBBBBB,4|-17|BBBBBB,3|-17|BBBBBB,1|-17|BBBBBB,0|-17|BBBBBB,-1|-17|BBBBBB,-3|-17|BBBBBB,-4|-17|BBBBBB,-5|-17|BBBBBB,-7|-17|BBBBBB,-15|-26|BBBBBB,-15|-35|BBBBBB,-7|-35|BBBBBB,7|-35|BBBBBB,15|-36|BBBBBB,15|-25|BBBBBB,1742|-531|CFFAFF,1742|-544|CFFAFF,1729|-544|CFFAFF,1728|-530|CFFAFF",picture_color_similarity)
    MyArray = Split(XY, "|")
    WW_Ec_Hux = CInt(MyArray(0)): WW_Ec_Huy = CInt(MyArray(1))
End Function
/*=============Õ½¶·ºÍÉùº§Ê°È¡µÄÍ¼É«¼°º¯Êý=============*/
//bossÁ¿ÑªÌõ(¼ì²âµÄÊÇbossµÄLV×ÖÌå,ÑªÌõÑÕÉ«»áËæµÈ¼¶±ä»¯)|ÖÜ±¾bossËÀÁËºóLv»¹»á¶ÌÔÝ´æÔÚ
Function WW_boss_appear()//ÎÞ¹ébossÃ»ÓÐÈÎÎñÌáÊ¾,ËùÒÔÖ»ÄÜ¼ì²â³£Ì¬»·¾³ºÍbossµÄLVÍ¼±êÁË
    XY=Plugin.Color.FindMutiColor(681,8,1244,54,"FFFFFF","-3|0|FFFFFF,-7|0|FFFFFF,-9|0|FFFFFF,-9|-3|FFFFFF,-9|-6|FFFFFF,-9|-8|FFFFFF,-9|-10|FFFFFF,-9|-11|FFFFFF,-9|-14|FFFFFF,21|-1|FFFFFF,10|-1|FFFFFF",picture_color_similarity)
    MyArray = Split(XY, "|")
    WW_boss_appear = CInt(MyArray(0)): Y = CInt(MyArray(1))
End Function//·ÅÆúËùÓÐ¼ì²âbossËÀÍöµÄ·½°¸,ÀíÓÉÊÇ1.3°æ±¾µÄÎÞ¹ébossÃ»ÓÐ»÷É±ÈÎÎñÌáÊ¾
//bossÁ¿ÑªÌõ·½°¸2(¼ì²âµÄÊÇbossÑªÌõ×îºóµÄÏñËØ²¿·ÖÎ»ÖÃ)
Function WW_boss_hp_point()//ÎÞ¹ébossÃ»ÓÐÈÎÎñÌáÊ¾
    FindColorEx 674,60,678,66,"45B2FD",1,picture_color_similarity,WW_boss_hp_point,intY
End Function
//Ãù³±bossËÀÍö¼ì²âµÄÈÎÎñºÍÖÕ¶ËÍ¼±ê(¼ì²â½çÃæÍ¼±êÕý³£)
Function WW_ÈÎÎñºÍÖÕ¶ËÍ¼±ê()
    XY=Plugin.Color.FindMutiColor(10,0,1860,256,"FFFFFF","-5|0|FFFFFF,-6|0|FFFFFF,-13|0|FFFFFF,-19|0|FFFFFF,-21|0|FFFFFF,-21|-3|FFFFFF,-21|-5|FFFFFF,-21|-9|FFFFFF,-21|-13|FFFFFF,-21|-17|FFFFFF,-21|-18|FFFFFF,-21|-23|FFFFFF,-21|-27|FFFFFF,-21|-31|FFFFFF,-20|-33|FFFFFF,-18|-34|FFFFFF,-15|-34|FFFFFF,-11|-34|FFFFFF,-8|-34|FEFEFE,-8|-33|FEFEFE,1795|-192|FFFFFF,1795|-194|FFFFFF,1795|-197|FFFFFF,1791|-195|FFFFFF,1798|-195|FFFFFF",picture_color_similarity)
    MyArray = Split(XY, "|")
    WW_ÈÎÎñºÍÖÕ¶ËÍ¼±ê = CInt(MyArray(0)): Y = CInt(MyArray(1))
End Function
//¼ì²âÈ«Ô±ËÀÍö(¸´»î°´Å¥)
Function alldiex()
    XY=Plugin.Color.FindMutiColor(0,0,1920,1080,"EBEBEB","28|0|EDEDED,56|0|EDEDED,7|-9|313131,11|-11|262626,17|-11|262626,8|-4|262626,22|-4|262626,21|4|262626,10|3|272727,15|7|262626,31|-10|262626,36|-10|262626,40|-10|262626,45|-10|262626,49|-10|262626,47|2|262626,38|2|262626,42|9|262626,16|-4|262626,42|5|EDEDED,42|1|EDEDED",picture_color_similarity)
    MyArray = Split(XY, "|")
    alldiex = CInt(MyArray(0)): alldiey = CInt(MyArray(1))
End Function
//¸±±¾ÄÚµÄÈ«Ô±ËÀÍö(¼ì²âÌôÕ½Ê§°ÜµÄÍ¼±ê)
Function alldie2()
    XY=Plugin.Color.FindMutiColor(0,0,1920,1080,"8680F0","0|-9|8680F0,0|-13|8680F0,0|-18|8680F0,0|-24|8680F0,0|-28|8680F0,0|-34|8680F0,0|-41|8680F0,20|-40|8680F0,20|-36|8680F0,20|-32|8680F0,20|-27|8680F0,20|-23|8680F0,20|-19|8680F0,29|-4|8680F0,29|-10|8680F0,29|-17|8680F0,29|-21|8680F0,29|-26|8680F0,29|-30|8680F0,29|-35|8680F0,29|-40|8680F0,49|-2|8680F0,57|-2|8680F0,66|-2|8680F0,66|-10|8680F0,66|-14|8680F0,49|-18|8680F0,49|-12|8680F0,57|-22|8680F0,57|-27|8680F0,57|-32|8680F0,57|-36|8680F0,57|-40|8680F0,79|-40|8680F0,79|-28|8680F0,81|-10|8680F0,124|-18|8680F0,124|-33|8680F0,163|-26|8680F0,195|-36|8680F0,180|-29|8680F0,188|-11|8680F0",picture_color_similarity)
    MyArray = Split(XY, "|")
    alldie2 = CInt(MyArray(0)): Y = CInt(MyArray(1))
End Function
//¼ì²â¸´»îÒ©½çÃæ
Function re_winx()
    XY=Plugin.Color.FindMutiColor(0,0,1920,1080,"4D6672","0|-14|4D6672,-14|-14|4D6672,-13|-1|4D6672,-237|546|000000,-237|566|000000,-206|570|000000,-176|566|000000,-176|541|000000,-229|545|FFFFFF,-231|553|FFFFFF,-231|558|FFFFFF,-225|558|FEFEFE,-225|555|FEFEFE,-221|555|FFFFFF,-216|555|FFFFFF,-209|555|FFFFFF,-209|561|FFFFFF,-215|561|FFFFFF,-221|561|FFFFFF,-199|561|FFFFFF,-191|566|FFFFFF,-182|567|FFFFFF,-182|559|F8F8F8,-190|559|FFFFFF,-190|552|FFFFFF,-180|549|FFFFFF,-201|549|FFFFFF,-191|546|FFFFFF,-191|544|FFFFFF",picture_color_similarity)
    MyArray = Split(XY, "|")
    re_winx = CInt(MyArray(0)): re_winy = CInt(MyArray(1))
End Function
//¼ì²âµ¥ÈËÌôÕ½°´Å¥(³ýÁËÖÜ±¾,Õâ¸öÊÇ¶ÌÌõµÄ)
Function WW_Solo_Challengex()
    XY=Plugin.Color.FindMutiColor(0,0,1920,1080,"E3E3E3","0|9|E3E3E3,0|15|E4E3E3,0|23|C8C8C8,7|23|262626,7|14|262626,7|7|262626,7|4|262626,18|3|262626,18|8|262626,18|17|262626,23|4|262626,23|11|262626,23|23|262626,32|23|3F3F3F,33|17|262626,42|17|262626,42|23|262626,38|23|262626,38|12|262626,38|6|262626,38|3|262626,42|7|262626,49|3|262626,49|9|262626,51|19|262626,54|25|262626",picture_color_similarity)
    MyArray = Split(XY, "|")
    WW_Solo_Challengex = CInt(MyArray(0)): WW_Solo_Challengey = CInt(MyArray(1))
End Function
//¼ì²âµ¥ÈËÌôÕ½°´Å¥(Õâ¸öÊÇÖÜ±¾µÄ,Õâ¸öÊÇÌõµÄ)
Function WW_week_challenge_Solo_Challengex()
    XY=Plugin.Color.FindMutiColor(0,0,1920,1080,"E4E4E4","7|0|262626,16|0|262626,23|0|262626,23|-8|262626,23|10|262626,29|10|272727,33|10|262626,33|5|262626,33|2|262626,35|2|262626,40|2|262626,40|6|656565,42|6|262626,42|10|262626,50|9|262626,50|6|262626,50|-2|262626,50|-8|262626,50|-10|262626,61|-10|E3E3E3,61|-7|E4E4E4,61|4|E4E4E4,61|14|E4E4E4,265|16|E4E4E4,266|-3|E3E3E3,256|-21|E3E3E3,187|-12|E3E3E3,157|12|E4E4E4,97|-2|E4E4E4",picture_color_similarity)
    MyArray = Split(XY, "|")
    WW_week_challenge_Solo_Challengex = CInt(MyArray(0)): WW_week_challenge_Solo_Challengey = CInt(MyArray(1))
End Function
//¼ì²â¿ªÊ¼ÌôÕ½°´Å¥
Function WW_Start_Challengex()
    XY=Plugin.Color.FindMutiColor(0,0,1920,1080,"E5E6E7","0|-17|E5E6E7,0|-27|E5E6E7,7|-24|262626,7|-14|262626,7|-5|262626,17|-5|2B2B2B,18|-10|262626,18|-16|262626,18|-23|262626,23|-23|262626,23|-16|262626,23|-7|262626,25|-2|393939,34|-2|262626,34|-11|262626,38|-14|262626,38|-20|262626,38|-24|262626,43|-20|262626,43|-11|262626,43|-4|262626,43|-8|262626,50|-24|262626,50|-19|262626,51|-6|262626,56|-1|262626",picture_color_similarity)
    MyArray = Split(XY, "|")
    WW_Start_Challengex = CInt(MyArray(0)): WW_Start_Challengey = CInt(MyArray(1))
End Function
//Éùº§Ê°È¡Í¼±ê¼ì²â(¸±±¾ÓÐ¿ÉÄÜ³öÏÖÔÚÓÒ±ß)
Function WW_echoes_absorb_scan()
    XY=Plugin.Color.FindMutiColor(480,523,1440,585,"FDF8F6","4|4|3E3E3E,4|0|3D3D3D,4|-5|3D3D3D,15|-5|FEFAF7,15|0|FAF5F3,15|5|F3EEEC,86|5|FFFFFF,86|-6|FFFFFF,159|3|D8E5EC,151|-6|D8E5EC,151|0|D8E5EC,151|5|D8E5EC,146|0|D8E5EC,146|-4|D8E5EC,125|-6|D8E5EC,125|-2|D8E5EC,125|3|D8E5EC",picture_color_similarity)
    MyArray = Split(XY, "|")
    WW_echoes_absorb_scan = CInt(MyArray(0)): WW_echoes_absorb_f_scan_y = CInt(MyArray(1))
End Function
//µØÍ¼·½ÏòÖ¸±êÖÐÐÄµãµÄ¼ì²â(Ä¿Ç°ÓÃ²»ÉÏ)
Function map_direction_icon()
    FindCenterColor 107,104,151,147,"E4FDFF",map_direction_icon, map_direction_icon_y
End Function
/*=============ÌåÁ¦½»»¥½çÃæÍ¼É«¼°º¯Êý=============*/
//ÌáÊ¾½çÃæ(Note)¼ì²âÌáÊ¾µÄ×ÖÌåºÍÍË³öÍ¼±ê
Function Note_interface()
    XY=Plugin.Color.FindMutiColor(0,0,1920,1080,"101010","3|0|0D0D0D,4|-3|000000,4|-8|000000,4|-13|000000,4|-17|000000,4|-22|000000,4|-26|000000,25|-27|000000,20|-27|000000,14|-27|000000,11|-27|060606,12|-24|000000,12|-19|000000,13|-18|000000,18|-18|000000,24|-18|000000,24|-22|000000,20|-22|000000,17|-22|000000,10|-13|000000,15|-13|000000,18|-13|000000,22|-13|000000,27|-13|000000,19|-9|000000,19|-8|000000,25|-7|000000,18|-3|000000,26|-1|000000,21|-1|000000,12|-5|000000,12|-8|000000,9|-2|000000,41|-1|000000,45|-1|000000,47|-4|000000,46|-8|000000,46|-12|000000,46|-16|000000,46|-17|000000,51|-17|000000,57|-17|000000,41|-17|000000,36|-17|000000,34|-6|000000,36|-8|000000,38|-11|000000,54|-11|000000,57|-9|010101,58|-6|000000,56|-25|000000,51|-25|000000,48|-25|000000,43|-25|000000,38|-25|000000,36|-25|000000,988|-15|4D6672,987|-29|4D6672,1002|-29|4D6672,1002|-14|4D6672",picture_color_similarity)
    MyArray = Split(XY, "|")
    Note_interface = CInt(MyArray(0)): WW_no_waveplate_interface_y = CInt(MyArray(1))
End Function
//ÁìÈ¡½±Àø½çÃæ(Claim Rewards)¼ì²âÁìÈ¡½±ÀøµÄ×ÖÌåºÍÍË³öÍ¼±ê
Function Claim_Rewards_interface()
    XY=Plugin.Color.FindMutiColor(0,0,1920,1080,"000000","-3|-3|000000,-6|-5|030303,1|-12|000000,-2|-12|050505,-7|-12|050505,-7|-19|000000,-2|-24|000000,0|-22|000000,6|-25|000000,12|-25|000000,18|-25|000000,18|-18|000000,12|-18|151515,6|-18|000000,6|-13|000000,6|-8|000000,18|-8|000000,18|-12|000000,12|-14|000000,12|-10|000000,12|-6|000000,8|-1|000000,17|-1|000000,27|-6|000000,27|-16|000000,27|-25|000000,31|-25|000000,36|-25|000000,36|-16|000000,36|-6|000000,46|-8|000000,42|-24|000000,46|-24|000000,50|-24|000000,65|-25|000000,65|-19|000000,65|-15|000000,74|-24|000000,77|-24|000000,81|-24|000000,83|-7|000000,70|-7|000000,60|-7|000000,90|-7|000000,90|-12|000000,90|-24|000000,97|-24|0A0A0A,102|-24|0A0A0A,102|-19|000000,96|-19|000000,96|-11|000000,95|-6|000000,102|-12|000000,102|-8|000000,102|-4|000000,107|-5|000000,109|-14|000000,109|-21|000000,109|-26|000000,116|-20|000000,115|-13|000000,115|-7|000000,115|-1|000000,980|-12|4D6672,980|-25|4D6672,993|-25|4D6672,993|-12|4D6672",picture_color_similarity)
    MyArray = Split(XY, "|")
    Claim_Rewards_interface = CInt(MyArray(0)): Y = CInt(MyArray(1))
End Function
//ÌáÊ¾²¹³ä½á¾§²¨Æ¬µÄ½çÃæ
Function Replenish_Waveplate_interface()
    XY=Plugin.Color.FindMutiColor(0,0,1920,1080,"000000","0|-2|000000,0|-3|000000,0|-5|000000,0|-6|000000,0|-9|000000,0|-13|000000,0|-21|000000,0|-24|000000,11|-23|000000,11|-21|000000,11|-17|000000,11|-14|000000,11|-10|000000,11|-6|000000,11|-2|000000,11|0|000000,1155|-22|4D6672,1170|-22|4D6672,1170|-8|4D6672,1155|-8|4D6672,488|94|626A6E,488|89|626A6E,487|82|626A6E,487|81|626A6E,487|76|626A6E,500|76|626A6E,500|80|626A6E,495|89|626A6E,495|92|626A6E,495|97|626A6E,495|99|909598,507|95|626A6E,507|91|626A6E,507|88|626A6E,517|85|626A6E,517|88|626A6E,517|92|626A6E,531|98|626A6E,534|98|626A6E,535|98|626A6E,546|97|626A6E,546|93|626A6E,546|88|626A6E,546|86|626A6E,546|85|626A6E,546|81|626A6E,546|75|626A6E,557|75|626A6E,562|75|626A6E,564|75|626A6E,559|81|626A6E,559|87|626A6E,559|92|626A6E,559|96|626A6E,577|96|626A6E,577|92|626A6E,577|87|626A6E,577|85|626A6E,577|76|626A6E,587|74|626A6E,587|79|626A6E,587|84|626A6E,587|88|626A6E,587|92|626A6E,587|93|626A6E,587|96|626A6E,608|86|626A6E,608|91|626A6E,617|86|626A6E,617|91|626A6E,617|96|626A6E,621|97|676E72,624|76|626A6E,614|76|626A6E,609|76|626A6E,602|76|626A6E,654|77|626A6E,644|77|626A6E,634|77|626A6E,638|78|626A6E,638|85|626A6E,646|85|626A6E,651|94|626A6E,666|94|626A6E,666|90|626A6E,666|85|626A6E,664|78|626A6E,669|78|626A6E,677|78|626A6E",picture_color_similarity)
    MyArray = Split(XY, "|")
    Replenish_Waveplate_interface = CInt(MyArray(0)): Y = CInt(MyArray(1))
End Function
/*=============ÒÔÇ°µÄÕ½¶·Í¼É«¼°º¯Êý=============*/
//½ñÏ«E1¼ì²â
Function jxE1x()
    XY=Plugin.Color.FindMutiColor(1450,925,1853,1010,"FFFFFF","-9|9|FFFFFF,16|16|FFFFFF,6|25|FFFFFF,-40|41|FFFFFF,-40|26|FFFFFF,-40|32|FFFFFF,-12|55|FFFFFF,-17|56|FFFFFF,-22|55|FFFFFF,-20|26|FFFFFF,-9|33|FFFFFF,3|21|FFFFFF,2|20|FFFFFF",picture_color_similarity)
    MyArray = Split(XY, "|")
    jxE1x = CInt(MyArray(0)): jxE1y = CInt(MyArray(1))
End Function
//½ñÏ«E2¼ì²â
Function jxE2x()
    XY=Plugin.Color.FindMutiColor(1450,925,1853,1010,"D6FFFF","-20|12|FFFFFF,-12|15|FFFFFF,-29|46|FFFFFF,-15|45|FFFFFF,-9|43|FFFFFF,-5|42|FFFFFF,-7|32|FFFFFF,-25|32|FFFFFF,-6|42|FFFFFF",picture_color_similarity)
    MyArray = Split(XY, "|")
    jxE2x = CInt(MyArray(0)): jxE2y = CInt(MyArray(1))
End Function
//½ñÏ«E3¼ì²â
Function jxE3x()
    XY=Plugin.Color.FindMutiColor(1450,925,1853,1010,"FFFFFF","-17|1|FFFFFF,-25|9|FFFFFF,-12|17|FFFFFF,-23|22|FFFFFF,-14|30|FFFFFF,-8|35|FFFFFF,-7|46|FFFFFF,-14|58|FFFFFF,-14|61|FFFFFF,6|35|FFFFFF,-2|51|FFFFFF,-4|59|FFFFFF,-29|55|FFFFFF,-24|57|FFFFFF,-30|50|FFFFFF,-33|44|FFFFFF",picture_color_similarity)
    MyArray = Split(XY, "|")
    jxE3x = CInt(MyArray(0)) : jxE3y = CInt(MyArray(1))
End Function 
//½ñÏ«E4¼ì²â
Function jxE4x()//²»È·¶¨¶àÏß³ÌÊÇ²»ÊÇÒª¼õµÍÏàËÆ¶È
    XY=Plugin.Color.FindMutiColor(1450,925,1853,1010,"FFFFFF","16|-2|FFFFFF,21|2|FFFFFF,9|5|FFFFFF,10|27|FFFFFF,22|23|FFFFFF,12|35|FFFFFF,20|31|FFFFFF",picture_color_similarity)
    MyArray = Split(XY, "|")
    jxE4x = CInt(MyArray(0)) : jxE4y = CInt(MyArray(1))
End Function
//½ñÏ«Q¼¼ÄÜ¼ì²â
Function jxQx()
    XY=Plugin.Color.FindMutiColor(0,0,1920,1080,"FEFAF7","14|0|FEFAF7,14|12|F6F2F0,1|12|F7F3F0,3|5|3B3A3A,12|5|414141,8|-20|FFFFFF,8|-25|FFFFFF,8|-31|FFFFFF,8|-37|FFFFFF,8|-41|FFFFFF,18|-49|FFFFFF,-2|-49|FFFFFF,-7|-57|FFFFFF,22|-57|FFFFFF,30|-57|FFFFFF,-10|-38|FFFFFF,25|-38|FFFFFF",picture_color_similarity)
    MyArray = Split(XY, "|")
    jxQx = CInt(MyArray(0)): jxQy = CInt(MyArray(1))
End Function
//¼ì²âCDºÃÁËµÄÃùÖÓÖ®¹ê
Function wlnQx()
    XY=Plugin.Color.FindMutiColor(0,0,1920,1080,"FAF6F3","0|-3|9C9A98,-4|-8|3B3B3B,0|-8|FEFAF7,5|-8|414141,7|-8|F0EEEC,0|-14|474747,-16|-49|FFFFFF,17|-49|FFFFFF,11|-64|FFFFFF,-13|-64|FFFFFF,1|-56|FFFFFF,1|-60|FFFFFF,-2|-83|FFFFFF,1|-77|FFFFFF,18|-73|FFFFFF,17|-70|FFFFFF,7|-58|FFFFFF,-8|-58|FFFFFF,-20|-42|FFFFFF,21|-42|FFFFFF",picture_color_similarity)
    MyArray = Split(XY, "|")
    wlnQx = CInt(MyArray(0)): wlnQy = CInt(MyArray(1))
End Function
//¼ì²âÎ¬ÀïÄÎµÄe¼¼ÄÜ
Function wlnEx()
    XY=Plugin.Color.FindMutiColor(0,0,1920,1080,"FAF6F3","-2|-4|3E3E3E,-2|-7|404040,-2|-12|3F3F3F,12|-42|FFFFFF,-14|-43|FFFFFF,6|-51|FFFFFF,8|-54|FFFFFF,9|-58|FFFFFF,-1|-65|FFFFFF,0|-71|FFFFFF,1|-75|FFFFFF,-12|-75|FFFFFF,14|-76|FFFFFF",picture_color_similarity)
    MyArray = Split(XY, "|")
    wlnEx = CInt(MyArray(0)): wlnEx = CInt(MyArray(1))	
End Function
//Î¬ÀïÄÎµÄµÚÒ»¸ö¹²ÃùÄÜÄÜÁ¿
Function wln_wengergy_x()
    XY=Plugin.Color.FindMutiColor(0,0,1920,1080,"72F2FF","7|0|74F6FF,20|0|76FAFF,27|0|74F7FF,34|0|74F6FF,41|0|73F4FF,47|0|72F3FF,54|0|71F1FF",0.8)
    MyArray = Split(XY, "|")
    wln_wengergy_x = CInt(MyArray(0)): wln_wengergy_y = CInt(MyArray(1))	
End Function
/*======Ãù³±³£ÓÃÊó±ê°´¼üº¯Êý·â×°======*/
//ÒÆ¶¯ÑÓ³Ùµã»÷ÑÓ³Ù
Sub ml(x, y, move_delay, leftclick_delay)
    MoveTo x, y
    Delay move_delay
    LeftClick 1
    Delay leftclick_delay
End Sub
//esc¼ÓÑÓ³Ù
Sub esc(delay_esc)
    KeyPress 27, 1
    Delay delay_esc
End Sub
//×ó»÷Á¬µãºó¼ÓÑÓ³Ù
Sub lc(lctiems, lc_delay)
    For lctimes
        LeftClick 1
        Delay lc_delay
    Next
End Sub
//ÖØ»÷¼ÓÑÓ³Ù(Charged Attack)
Sub ÖØ»÷(ÖØ»÷_Ê±¼ä, delay_ÖØ»÷)
    LeftDown 1
    Delay ÖØ»÷_Ê±¼ä
    LeftUp 1
    Delay delay_ÖØ»÷
End Sub
//ÊÓ½Ç»ØÕý(carmer restore aut)ÖÐ¼ü¼ÓÑÓ³Ù
Sub mc(delay_MiddleClick)
    MiddleClick 1
    Delay delay_MiddleClick
End Sub
//wÒÆ¶¯¼ÓÑÓ³Ù
Sub w(times, delay_w)
    KeyDown Move_forward, 1
    Delay times
    KeyUp Move_forward, 1
    Delay delay_w
End Sub
//aÒÆ¶¯¼ÓÑÓ³Ù
Sub a(times, delay_a)
    KeyDown Move_left, 1
    Delay times
    KeyUp Move_left, 1 
    Delay delay_a
End Sub
//dÒÆ¶¯¼ÓÑÓ³Ù
Sub d(times, delay_d)
    KeyDown Move_right, 1
    Delay times
    KeyUp Move_right, 1
    Delay delay_d
End Sub
//sÒÆ¶¯¼ÓÑÓ³Ù
Sub s(times, delay_s)
    KeyDown Move_backward, 1
    Delay times
    KeyUp Move_backward, 1
    Delay delay_s
End Sub
//w¼ÓÊÓ½Ç×ªÒÆ
Sub wm(times)
    KeyDown Move_forward, 1
    Delay times
    KeyUp Move_forward, 1
    MiddleClick 1
    Delay 1000
End Sub
//a¼ÓÊÓ½Ç×ªÒÆ
Sub am(times)
    KeyDown Move_left, 1
    Delay times
    KeyUp Move_left, 1
    MiddleClick 1 
    Delay 1000
End Sub
//d¼ÓÊÓ½Ç×ªÒÆ
Sub dm(times)
    KeyDown Move_right, 1
    Delay times
    KeyUp Move_right, 1
    MiddleClick 1
    Delay 1000
End Sub
//s¼ÓÊÓ½Ç×ªÒÆ
Sub sm(times)
    KeyDown Move_backward, 1
    Delay times
    KeyUp Move_backward, 1
    MiddleClick 1
    Delay 1000
End Sub
//Ãù³±w·½Ïò±¼ÅÜ¼ÓÑÓ³Ù
Sub wwrun(wwrun_time, wwrun_delay)
    KeyDown Move_forward, 1
    RightDown 1
    Delay wwrun_time
    KeyUp Move_forward, 1
    RightUp 1
    Delay wwrun_delay
End Sub
//Ãù³±a·½Ïò±¼ÅÜ¼ÓÑÓ³Ù
Sub warun(warun_time, warun_delay)
    KeyDown Move_right, 1
    RightDown 1
    Delay warun_time
    KeyUp Move_right, 1
    RightUp 1
    Delay warun_delay
End Sub
//Ãù³±d·½Ïò±¼ÅÜ¼ÓÑÓ³Ù
Sub wdrun(wdrun_time, wdrun_delay)
    KeyDown  Move_left, 1
    RightDown 1
    Delay wdrun_time
    KeyUp  Move_left, 1
    RightUp 1
    Delay wdrun_delay
End Sub
//Ãù³±s·½Ïò±¼ÅÜ¼ÓÑÓ³Ù
Sub wsrun(wsrun_time, wsrun_delay)
    KeyDown Move_backward, 1
    RightDown 1
    Delay wsrun_time
    KeyUp Move_backward, 1
    RightUp 1
    Delay wsrun_delay
End Sub
//×ßÅÜÇÐ»»
Sub ctrl(ctrl_delay)
    KeyPress Walk_or_Run, 1
    Delay ctrl_delay
End Sub
//³å´Ì»òÉÁ±Ü
Sub shift(shift_delay)
    KeyPress Dash_or_Dodge, 1
    Delay shift_delay	
End Sub
//µã»÷e¼ÓÑÓ³Ù
Sub e(delay_e)
    KeyPress Resonance_Skill, 1
    Delay delay_e
End Sub
//³¤°´e¼ÓÑÓ³Ù
Sub longe(presstime, delay_longe)
    KeyDown Resonance_Skill, 1
    Delay presstime
    KeyUp Resonance_Skill, 1
    Delay delay_longe
End Sub
//³¤°´eÒÆ¶¯¼ÓÑÓ³Ù£¨Ô­Éñ°´×¡ÔªËØÕ½¼¼¼ÓÉ¨Ãè£©
Sub longemove(presstime, movetimes, movex, longemove_delay)
    KeyDown Resonance_Skill, 1
    Delay presstime//247ÊÇ²ÝÉñ¿ª³¤EµÄ¼«ÏÞ
    SetSimMode 2
    For movetimes//5
        MoveR movex, 0//784, 0
        Delay 10
    Next       
    SetSimMode 0
    KeyUp Resonance_Skill, 1
    Delay longemove_delay
End Sub
//µã»÷r¼ÓÑÓ³Ù
Sub r(delay_r)
    KeyPress Resonance_Liberation, 1
    Delay delay_r
End Sub
//t(Ì½Ë÷¹¤¾ß:µãÒ»ÏÂ¹³ËøµÄÇéÐÎ)
Sub t(t_delay)
    KeyPress Use_Utility, 1
    Delay t_delay
End Sub
//Ä£¿éÂÖÅÌ//Ì½Ë÷Ä£¿éÂÖÅÌ
Sub tab(tab_delay)
    KeyPress Utility_Wheel, 1
    Delay tab_delay
End Sub
//µã»÷q¼ÓÑÓ³Ù
Sub q(delay_q)
    KeyPress Echo_Skill, 1
    Delay delay_q
End Sub
//ÇÐ»»Ãé×¼//ÇÐ»»Ãé×¼Ä£Ê½
Sub g(delay_g)
    KeyPress Switch_to_Aim_Mode, 1
    Delay delay_g
End Sub
//ÌøÔ¾£¨°´¿Õ¸ñ£©¼ÓÑÓ³Ù,ÌúµÀÃ»ÓÐÌøÔ¾°´¼ü
Sub space(delay_space)
    KeyPress Jump, 1
    Delay delay_space
End Sub
//ÅÊÅÀÊ±ÂäÏÂ
Sub x(delay_x)
    KeyPress Drop_Down_when_Climbing, 1
    Delay delay_x
End Sub
//µãF¼ÓÑÓ³Ù(Ê°È¡½»»¥)
Sub f(delay_f)
    KeyPress Pick_Up_or_Interact, 1
    Delay delay_f
End Sub
//ÇÐ½ÇÉ«1
Sub ch1()
    KeyPress Switch_to_Team_Member_1, 1
End Sub
//ÇÐ½ÇÉ«2
Sub ch2()
    KeyPress Switch_to_Team_Member_2, 1
End Sub
//ÇÐ½ÇÉ«3
Sub ch3()
    KeyPress Switch_to_Team_Member_3, 1
End Sub
//ÇÐ½ÇÉ«4
Sub ch4()
    KeyPress Switch_to_Team_Member_4, 1
End Sub
//ÈÎÎñ×·×Ù
Sub v(delay_v)
    KeyPress Track_Quest, 1
    Delay delay_v
End Sub
//ÖÐ¶ÏÌôÕ½
Sub p(delay_p)
    KeyPress Quit_Challenge, 1
    Delay delay_p
End Sub
//¹¦ÄÜÈë¿ÚÂÖÅÌ
Sub capsLock(delay_capsLock)
    KeyPress Quick_Access_Wheel, 1
    Delay delay_capsLock
End Sub
//nµã¿ªÓÊ¼þ
Sub n(delay_n)
    KeyPress Mail, 1
    Delay delay_n
End Sub
//mµã¿ªµØÍ¼¼ÓÑÓ³Ù
Sub map(delay_map)
    KeyPress Map1, 1
    Delay delay_map
End Sub
//jµã¿ªÈÎÎñ
Sub j(delay_j)
    KeyPress Quests, 1
    Delay delay_j
End Sub
//L±à¶Ó
Sub l(delay_l)
    KeyPress Team, 1
    Delay delay_l
End Sub
//µã»÷b¼ÓÑÓ³Ù£¨´ò¿ª±³°ü£©
Sub b(delay_b)
    KeyPress Backpack, 1
    Delay delay_b
End Sub
//c¹²ÃùÕß
Sub c(delay_c)
    KeyPress Resonator, 1
    Delay delay_c
End Sub
//oÌ½Ë÷Ä£¿é
Sub o(delay_o)
    KeyPress Utilities, 1
    Delay delay_o
End Sub
//h½Ì³Ì°Ù¿Æ
Sub h(delay_h)
    KeyPress Tutorial, 1
    Delay delay_h
End Sub
//enterÁÄÌì
Sub enter(delay_enter)
    KeyPress Chat, 1
    Delay delay_enter
End Sub
//°´f1¼ÓÑÓ³Ù
Sub f1(f1_delay)
    KeyPress Events, 1
    Delay f1_delay
End Sub
//°´f2¼ÓÑÓ³Ù
Sub f2(f2_delay)
    KeyPress Guidebook, 1
    Delay f2_delay
End Sub
//°´f3¼ÓÑÓ³Ù
Sub f3(f3_delay)
    KeyPress Convene, 1
    Delay f3_delay
End Sub
//°´f4¼ÓÑÓ³Ù
Sub f4(f4_delay)
    KeyPress Pioneer_Podcast, 1
    Delay f4_delay
End Sub
//¶àÈËÓÎÏ·
Sub u(u_delay)
    KeyPress Co_op_Mode, 1
    Delay u_delay
End Sub
//È¥¹ã¸æ
//Event Form1.Load
//    Call Plugin.A_QY.QBK("*", Form1.Hwnd, "F10|F11|F12", 4, "»¶Ó­Ê¹ÓÃ")
//End Event
//Event Form1.Timer1.Timer
//    Call Plugin.A_QY.QGG()
//End Event
//×´Ì¬´°¿ÚÁÐ±í²åÈë
Sub status_list(status_list_text)//Ê×Ñ¡ÏîÎª-1
    Form1.×´Ì¬´°¿Ú.InsertItem status_list_text, Form1.×´Ì¬´°¿Ú.ListIndex = Form1.×´Ì¬´°¿Ú.ListCount
    If Form1.×´Ì¬´°¿Ú.ListCount = 0 Then//Èç¹ûÁÐ±í×ÜÊý¼ì²âµ½0¼´×´Ì¬´°¿ÚÎª¿Õ,ÎÞ·¨½øÐÐ²åÈë
        Form1.×´Ì¬´°¿Ú.AddItem status_list_text//ÐÂÔöÏîÄ¿
    End If
End Sub
